// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Mux (instruction and ALU output) => A register => Mux(A, inMemory) = res => ALU (A, res) => outM
    Not(in=instruction[0], out=notInstructionZero);
    Mux16(a=instruction, b=ALUOut, sel=instruction[0], out=ARegister);
    ARegister(in=ARegister, load=instruction[9], out=ARegisterOut, out=ARegisterPCOut);
    Mux16(a=ARegisterOut, b=inM, sel=instruction[3], out=ALUY);
    DRegister(in=ALUOut, load=instruction[10], out=DRegisterOut);

    // Goto and conditional jumps
    // ng and zr
    Not(in=zr, out=ALUOutIsNN);
    Not(in=ng, out=ALUOutIsGEZero);
    And(a=ALUOutIsNN, b=ALUOutIsGEZero, out=ALUOutIsGTZero);
    Or(a=ng, b=zr, out=ALUOutIsLEZero);
    // JMP
    And(a=instruction[13], b=instruction[14], out=j1AndJ2);
    And(a=j1AndJ2, b=instruction[15], out=JMP);
    // JLE
    Not(in=instruction[15], out=notJ3);
    And(a=j1AndJ2, b=notJ3, out=JLE);
    And(a=JLE, b=ALUOutIsLEZero, out=loadJLE);
    // JNE
    Not(in=instruction[14], out=notJ2);
    And(a=instruction[13], b=notJ2, out=j1AndNotJ2);
    And(a=j1AndNotJ2, b=instruction[15], out=JNE);
    And(a=JNE, b=ALUOutIsNN, out=loadJNE);
    // JLT 
    And(a=j1AndNotJ2, b=notJ3, out=JLT);
    And(a=JLT, b=ng, out=loadJLT);
    // JGE
    Not(in=instruction[13], out=notJ1);
    And(a=instruction[14], b=instruction[15], out=j2AndJ3);
    And(a=notJ1, b=j2AndJ3, out=JGE);
    And(a=JGE, b=ALUOutIsGEZero, out=loadJGE);
    // JEQ
    And(a=notJ1, b=instruction[14], out=notJ1AndJ2);
    And(a=notJ1AndJ2, b=notJ3, out=JEQ);
    And(a=JEQ, b=zr, out=loadJEQ);
    // JGT
    And(a=notJ1, b=notJ2, out=notJ1AndNotJ2);
    And(a=notJ1AndNotJ2, b=instruction[15], out=JGT);
    And(a=JGT, b=ALUOutIsGTZero, out=loadJGT);
    // null
    And(a=notJ1AndNotJ2, b=notJ3, out=increment);
    Or8Way(in=[loadJEQ, loadJGE, loadJGT, loadJLE, loadJLT, loadJNE, JMP, false], out=loadControlBit);

    


    PC(in=ARegisterPCOut, load=loadControlBit, inc=increment, reset=reset, out=pc);
    ALU(x=DRegisterOut, y=ALUY, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=ALUOut, out=outM,  zr=zr, ng=ng);

}